@using HRMapp.ViewModels
@model EmployeeEditorViewModel

@{
    ViewData["Title"] = "EmployeeEditor";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Model.FormTitle</h2>

@if (!String.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}

    @*TODO Can these ddls be placed in the form?*@
    <label for="ddlEmployeeType">Functie:</label>
    @Html.DropDownList("ddlEmployeeType", Model.EmployeeTypes)

    <label id="lblTeamLeader" for="ddlTeamLeader">Teamleider:</label>@*TODO Je mag jezelf niet als teamleider kunnen kiezen*@
    @Html.DropDownList("ddlTeamLeader", Model.TeamLeaders)

    <form asp-action="@Model.FormAction" method="post">
        <input asp-for="@Model.EmployeeType" type="hidden" />
        <input asp-for="@Model.TeamLeaderId" type="hidden" />
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="@Model.FirstName" class="control-label"></label>
                <input asp-for="@Model.FirstName" class="form-control" placeholder="Voornaam" />
            </div>
            <div class="form-group col-md-6">
                <label asp-for="@Model.LastName" class="control-label"></label>
                <input asp-for="@Model.LastName" class="form-control" placeholder="Achternaam" />
            </div>
        </div>

        <div class="form-group">
            <label asp-for="@Model.PhoneNumber" class="control-label"></label>
            <input asp-for="@Model.PhoneNumber" class="form-control" placeholder="Telefoonnummer" type="tel" />
        </div>
        <div class="form-group">
            <label asp-for="@Model.EmailAddress" class="control-label"></label>
            <input asp-for="@Model.EmailAddress" class="form-control" placeholder="Emailadres" type="email" />
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="@Model.Street" class="control-label"></label>
                <input asp-for="@Model.Street" class="form-control" placeholder="Straat" />
            </div>
            <div class="form-group col-md-6">
                <label asp-for="@Model.HouseNumber" class="control-label"></label>
                <input asp-for="@Model.HouseNumber" class="form-control" placeholder="Huisnummer" />
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label asp-for="@Model.ZipCode" class="control-label"></label>
                <input asp-for="@Model.ZipCode" class="form-control" placeholder="Postcode" />
            </div>
            <div class="form-group col-md-6">
                <label asp-for="@Model.City" class="control-label"></label>
                <input asp-for="@Model.City" class="form-control" placeholder="Woonplaats" />
            </div>
        </div>
        <div id="divSkillsetSelector" class="form-group">
            @*@Html.Partial("~/Views/Partial/_SkillsetSelector.cshtml", Model.SkillsetSelectorViewModel)*@
            <div class="row">
                <div class="col-md-5">
                    <label class="control-label" for="lboxAvailableSkillsets">Skillsets:</label>
                </div>
                <div class="col-md-2"></div>
                <div class="col-md-5">
                    <label class="control-label" for="lboxRequiredSkillsets">Nodige skillsets:</label>
                </div>
            </div>
            <div class="row">
                <div class="col-md-5">
                    @Html.ListBox("lboxAvailableSkillsets", Model.SkillsetSelectorViewModel.AvailableSkillsetListItems, new { @class = "form-control", size = 10 })
                </div>
                <div class="col-md-2">
                    <div>
                        <a id="btnSkillsetsMoveToRequired" class="btn btn-default">>></a>
                    </div>
                    <div>
                        <a id="btnSkillsetsMoveFromRequired" class="btn btn-default"><<</a>
                    </div>
                </div>
                <div class="col-md-5">
                    @Html.ListBox("lboxRequiredSkillsets", Model.SkillsetSelectorViewModel.RequiredSkillsetListItems, new { @class = "form-control", size = 10 })
                </div>
            </div>
            @* TODO script wordt hier nu ook ingeladen, is dit slecht? *@
        </div>


        <div class="form-group">
            <button id="btnSubmit" type="submit" class="btn btn-default">Opslaan</button>
            <a id="btnCancel" class="btn btn-default">Annuleren</a>
        </div>
    </form>

<script>
    var userInputChanged = false;
    @if (!String.IsNullOrEmpty(Model.ErrorMessage))
    {
        @:userInputChanged = true;
    }

    document.getElementById('FirstName').oninput = function () { userInputChanged = true; }
    document.getElementById('LastName').oninput = function () { userInputChanged = true; }
    document.getElementById('PhoneNumber').oninput = function () { userInputChanged = true; }
    document.getElementById('EmailAddress').oninput = function () { userInputChanged = true; }
    document.getElementById('Street').oninput = function () { userInputChanged = true; }
    document.getElementById('HouseNumber').oninput = function () { userInputChanged = true; }
    document.getElementById('ZipCode').oninput = function () { userInputChanged = true; }
    document.getElementById('City').oninput = function () { userInputChanged = true; }

    document.getElementById('btnSkillsetsMoveToRequired').onclick = function () { userInputChanged = true; }
    document.getElementById('btnSkillsetsMoveFromRequired').onclick = function () { userInputChanged = true; }

    document.getElementById('ddlEmployeeType').onchange = function () {
        userInputChanged = true;
        document.getElementById('EmployeeType').value = this.selectedIndex;

        updateDdlTeamLeaderVisibility(this.selectedIndex);
    }
    document.getElementById('EmployeeType').value = document.getElementById('ddlEmployeeType').selectedIndex;

    updateDdlTeamLeaderVisibility(document.getElementById('ddlEmployeeType').selectedIndex);

    function updateDdlTeamLeaderVisibility(selectedIndex) {
        var ddlTeamLeader = document.getElementById('ddlTeamLeader');
        var lblTeamLeader = document.getElementById('lblTeamLeader');
        var divSkillsetSelector = document.getElementById('divSkillsetSelector');
        var productionWorker = 0;
        var teamLeader = 1;

        if (selectedIndex == productionWorker || selectedIndex == teamLeader) {
            divSkillsetSelector.removeAttribute('hidden');
        } else {
            divSkillsetSelector.setAttribute('hidden', true);
        }
        if (selectedIndex == productionWorker) {
            lblTeamLeader.removeAttribute('hidden');
            ddlTeamLeader.removeAttribute('hidden');
        } else {
            lblTeamLeader.setAttribute('hidden', true);
            ddlTeamLeader.setAttribute('hidden', true);
        }
    }

    document.getElementById('ddlTeamLeader').onchange = function () {
        userInputChanged = true;
        document.getElementById('TeamLeaderId').value = this.value;
    }
    document.getElementById('TeamLeaderId').value = document.getElementById('ddlTeamLeader').selectedIndex;
    // TODO remove duplicate javascript eventhandlers for ddl

    document.getElementById('btnSubmit').onclick = function() {
        userInputChanged = false; 
        selectAllOptions(document.getElementById('lboxRequiredSkillsets'));
    }
    document.getElementById('btnCancel').onclick = function () {
        if (@Model.Id > -1) {
            window.location.href = '/Employee/Index/@Model.Id';
        } else {
            window.location.href = '/Employee';
        }
    }

    window.onbeforeunload = function (event) {
        if (userInputChanged) {
            var message = 'Er zijn wijzigingen niet opgeslagen. Weet u zeker dat u de pagina wilt verlaten?';
            return message;
        }
    }
</script>
<script>
    document.getElementById('btnSkillsetsMoveToRequired').onclick = function () {
        moveSelectedOptionsBetweenSelects(document.getElementById('lboxAvailableSkillsets'), document.getElementById('lboxRequiredSkillsets'));
    }

    document.getElementById('btnSkillsetsMoveFromRequired').onclick = function () {
        moveSelectedOptionsBetweenSelects(document.getElementById('lboxRequiredSkillsets'), document.getElementById('lboxAvailableSkillsets'));
    }

    function moveSelectedOptionsBetweenSelects(selectElementFrom, selectElementTo) {
        var selectedItems = getSelectValues(selectElementFrom);

        for (var i = 0; i < selectedItems.length; i++) {
            selectElementFrom.remove(getOptionIndexByValue(selectElementFrom, selectedItems[i].value));  // Could be more efficient perhaps
            selectElementTo.add(selectedItems[i]);
        }
    }

    // Return an array of the selected opion values
    // select is an HTML select element
    function getSelectValues(selectElement) {
        var result = [];
        var options = selectElement && selectElement.options;   // If I understand correctly, it checks if selectElement is not undefined, if it's not, it assigns the next statement to options
        var opt;

        for (var i = 0, iLen = options.length; i < iLen; i++) {
            opt = options[i];

            if (opt.selected) {
                result.push(opt);
            }
        }
        return result;
    }

    function getOptionIndexByValue(selectElement, id) {
        for (var i = 0; i < selectElement.options.length; i++) {
            if (selectElement.options[i].value == id) {
                return i;
            }
        }
        return -1;
    }

    function selectAllOptions(selectElement) {
        for (var i = 0; i < selectElement.options.length; i++) {
            selectElement.options[i].selected = true;
        }
    }
</script>